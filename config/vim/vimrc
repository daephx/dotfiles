" vimrc: A greatly improved version oF the good old UNIX editor Vi
" https://github.com/vim/vim

" vim-tiny lacks 'eval'
if has("eval")
  let skip_defaults_vim = 1
endif

" Plugins

" Install vim-plug
function! InstallVimplug()
  " Dependency Validation
  let vimplug_exists=expand('~/.vim/autoload/plug.vim')
  if has('win32') && !has('win64')
    let curl_exists=expand('C:\Windows\Sysnative\curl.exe')
  else
    let curl_exists=expand('curl')
  endif
  " Bootstrap vim-plug
  if !filereadable(vimplug_exists)
    if !executable(curl_exists)
      echoerr 'You have to install curl or first install vim-plug yourself!'
      return
    endif
    echo "Installing Vim-Plug..."
    echo ""
    let plug_url='https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    silent exec '!' . curl_exists . ' -fLo '
          \ . shellescape(vimplug_exists)
          \ . " --create-dirs " . plug_url
    let g:not_finish_vimplug = "yes"
    autocmd VimEnter * PlugInstall
    source expand('<sfile>')
  endif
endfunction

" Only load plugins if vim-plug file detected
if filereadable(expand("~/.vim/autoload/plug.vim"))
  call plug#begin($XDG_DATA_HOME . '/vim/plugins')

  Plug 'Yggdroot/indentLine'
  Plug 'airblade/vim-gitgutter'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'liuchengxu/vim-which-key'
  Plug 'machakann/vim-highlightedyank'
  Plug 'sheerun/vim-polyglot'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-rhubarb'
  Plug 'tpope/vim-vinegar'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'

  " Fzf - fuzzy search
  if isdirectory('/usr/local/opt/fzf')
    Plug '/usr/local/opt/fzf'
    Plug 'junegunn/fzf.vim'
  else
    Plug 'junegunn/fzf', { 'dir': $XDG_LOCAL_HOME . '/src/fzf', 'do': './install --bin' }
    Plug 'junegunn/fzf.vim'
  endif

  call plug#end()
endif

" vim-airline
if &runtimepath =~? "vim-airline"
  " disable insert text if plugins available
  set noshowmode
endif

let g:airline_theme = 'term'
let g:airline_detect_spell=0
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1

let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#show_splits = 0
let g:airline#extensions#tabline#show_tab_count = 1
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#show_tabpages = 1
let g:airline#extensions#tabline#show_tabs = 1
let g:airline#extensions#tabline#tab_min_count = 1

" fzf.vim
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"

" ripgrep
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

" Indent blank line
let g:indentLine_enabled = 1
let g:indentLine_char = '│'
let g:indentLine_first_char = '│'
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_fileTypeExclude = ['help']

" set highlight to 1000 ms
let g:highlightedyank_highlight_duration = 1000

" Session-saver
let g:session_autosave = 'yes'

let g:gitgutter_sign_allow_clobber = 0
let g:gitgutter_set_sign_backgrounds = 1
let g:gitgutter_override_sign_column_highlight = 1

let g:gitgutter_sign_added = '▎'
let g:gitgutter_sign_modified = '▎'
let g:gitgutter_sign_removed = '▎'
let g:gitgutter_sign_removed_first_line = '▎'
let g:gitgutter_sign_removed_above_and_below = '▎'
let g:gitgutter_sign_modified_removed = '▎'

" keys to call the function Leader key preference
" nnoremap <space> <nop>
let g:mapleader = "\<space>"
let g:localleader = "\\"

" Settings
set nocompatible " Don't try to be vi compatible
set secure " Disable sourcing of directory vimrc/exrc

set autoread " Auto reload open buffer
set autowrite " Write files on change
set hidden " Hide buffers instead of unloading them
set lazyredraw " Execute macros faster
set noautochdir " Disable auto cd to open file
set splitbelow " Open new splits below
set splitright " Open new splits to the right

set cmdheight=1 " Make command-line only one row high
set colorcolumn=+1 " Textwidth column ruler
set conceallevel=0 " Prevent conceal
set expandtab " Replace tabs with spaces
set foldcolumn=0 " Column shown in the window indicating open/closed folds
set history=100 " Command history
set icon " Enable icon support
set list " Enable list chars
set nowrap " Disable line wrapping
set number " Show absolute line numbers
set relativenumber " Show relative line numbers
set ruler " Show position on in bottom right
set scrolloff=8 " Keep cursor centered on screen
set showmode " Show command and insert mode
set signcolumn=yes " Display padding/signs next to line numbers
set timeout " Set time limit on key sequence
set timeoutlen=250 " Timeout for mapped sequence
set ttimeoutlen=0 " Timeout for key code sequence
set updatetime=1000 " Timeout idle before CursorHold or updating swapfile

set textwidth=80 " Limit length of characters per line
set shiftwidth=2 " Number of spaces for expandtab indent
set softtabstop=2 " Number of spaces for tabs during edit operations
set tabstop=4 " Number of spaces to represent tab characters
set encoding=utf-8 " Default file encoding

set backspace=indent,eol,start " More powerful backspacing
set diffopt+=vertical " Start diff mode with vertical splits
set linebreak
set spellsuggest=fast,10

" Popup Menu
set pumheight=20 " Control popup menu length
set pumwidth=15 " Control popup menu thickness

" Configure 'shortmess' to suppress common messages and make output more concise
set shortmess+=O  " Suppress 'empty file' message on open
set shortmess+=T  " Suppress 'press ENTER' for temporary messages
set shortmess+=a  " Suppress 'File A' and 'File B' in diff mode
set shortmess+=c  " Suppress 'pattern not found' message
set shortmess+=f  " Shorten quickfix/search count message
set shortmess+=o  " Suppress 'only one file' message on open
set shortmess+=t  " Suppress 'Hit ENTER to continue' after errors
set shortmess-=I  " Suppress intro message (version info)

" set editor background style
set background=dark

" activate line numbers
set number
set relativenumber
set signcolumn="yes"

" Disable visual bell
set belloff=all noerrorbells novisualbell t_vb=

" turn col and row position on in bottom right
set ruler

" show command and insert mode
set showmode

" Should show statusline and tabline
set laststatus=2
set showtabline=2
set signcolumn=yes

" Enable list chars
set list

" Icon support
set icon

" Center the cursor always on the screen
set scrolloff=8

" Cursorline settings
set cursorline
set cursorlineopt=both

" Highlight search
set hlsearch " Highlight search
set ignorecase " Case insensitive search
set incsearch " Enable incremental search
set smartcase " Case sensitive only if search contains uppers

" Folding
set foldmethod=indent " Fold by method (indent & syntax are both good)
set foldlevelstart=9  " We want all fold to be expand at start
set foldnestmax=9 " Max fold nest levels

" Virtual fill characters for UI elements
set fillchars+=fold:\ ,vert:│

" Enhanced command-line completion
" Insert mode completion
set completeopt=menuone,noinsert,noselect

set wildmenu " Enable wild menu by default
set wildignorecase
set wildmode=full:lastused
set wildoptions=pum

" Ignore files
set wildignore+=*.db " Database files
set wildignore+=*.o " Object files
set wildignore+=*.obj " Object files (Windows)
set wildignore+=*.pyc " Python cache files
set wildignore+=*.rbc " Ruby bytecode files
set wildignore+=*.so " Shared object files
set wildignore+=*.sqlite " SQLite database files
set wildignore+=*.swp " Swap files (Vim)
set wildignore+=*.zip " Zip archives
set wildignore+=*/tmp/* " Temporary files in tmp directories
set wildignore+=*_build/* " Build directories
set wildignore+=*node_modules/ " Node.js dependencies
set wildignore+=.git/ " Git version control metadata
set wildignore+=__pycache__ " Python cache directory
set wildignore+=android/ " Android project directory
set wildignore+=build/ " Common build directory
set wildignore+=coverage/ " Code coverage data
set wildignore+=ios/ " iOS project directory

" Set additional options (optional) to disable in the working directory
set nobackup " Don't create backups in the current directory
set nowritebackup " Don't create write-backups in the current directory
set noswapfile " Don't create swap files in the current directory

" Resistant undo
set undofile

" Set Vim directories for backup, swap, and undo using the variable
set backupdir^=~/.vim/backups//
set directory^=~/.vim/swaps//
set undodir^=~/.vim/undo//

" Prevents truncated yanks, deletes, etc.
set viminfo+=n~/.cache/vim/.viminfo
set viminfo='20,<1000,s1000

" Format Options
" Control how Vim formats text, including line breaks, comments, and special characters.
set fo+=1 " Don't break a line after a one-letter word
set fo+=M " Don't add space before or after multi-byte char
set fo+=j " Delete comment prefix when joining
set fo+=l " Long lines not broken in insert mode
set fo+=m " Multi-byte character line break support
set fo+=q " Allow formatting of comments with gq
set fo-=2 " Don't use the indent of second paragraph line
set fo-=B " Don't add space between two multi-byte chars
set fo-=a " Disable auto-formatting of paragraph changes
set fo-=b " Don't use broken 'vi-compatible auto-wrapping'
set fo-=c " Autowrap comments using textwidth with leader
set fo-=n " Don't recognized numbered lists
set fo-=o " Don't auto-insert comment leader on o/O in normal
set fo-=r " Don't auto-insert comment leader on enter in insert
set fo-=t " Don't auto-wrap text using text width
set fo-=v " Don't use broken 'vi-compatible auto-wrapping'
set fo-=w " Don't use trailing whitespace for paragraphs

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Copy/Paste/Cut
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
endif

if has('termguicolors')
  set t_Co=256 " Enable 256 colors
  set termguicolors " Enable GUI colors for the terminal to get truecolor
endif

" Customize cursor appearance for different modes with unique shapes, sizes,
" and blink settings for a more intuitive visual distinction while editing.
set guicursor=n-v-c:block-nCursor/lCursor,ve:ver35-Cursor,o:hor50-Cursor,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor,sm:block-Cursor-blinkwait175-blinkoff150-blinkon175

" Cursor options:
" Use a line cursor in insert mode and a block cursor elsewhere.
" Cursor style reference (used across various terminal modes):
" 0 -> blinking block
" 1 -> blinking block (default)
" 2 -> solid block
" 3 -> blinking underscore
" 4 -> solid underscore
" 5 -> blinking vertical bar (xterm)
" 6 -> steady vertical bar (xterm)

if &term =~ "^xterm"
  let &t_SI .= "\e[5 q"
  let &t_SR .= "\e[4 q"
  let &t_EI .= "\e[1 q"
elseif &term == "win32"
  let &t_ti .= "\e[1 q"
  let &t_SI .= "\e[5 q-- INSERT --"
  let &t_EI .= "\e[1 q"
  let &t_te .= "\e[0 q"
else
  let &t_EI .= "\e[1 q"
  let &t_SI .= "\e[5 q"
  let &t_te .= "\e[0 q"
  let &t_ti .= "\e[1 q"
endif

" Restore cursor when leaving Vim (for Windows Powershell)
if has("autocmd")
  augroup cursor_au
    autocmd!
    autocmd VimEnter * silent !echo -ne "\e[3 q"
    autocmd VimLeave * silent !echo -ne "\e[5 q"
  augroup END
endif

" Enable syntax highlighting and configure spell checking
if has("syntax")
  if !g:syntax_on
    set spell " Enable spell checking for comments/strings
    set syntax=on " Enable syntax highlighting
    syntax spell toplevel " Apply spell highlighting to top-level syntax
  endif
  set nospell " Disable spell checking globally by default
  syntax enable
  syntax spell toplevel " Apply spell highlighting for specific contexts
endif

" Vim8 Conditions
if v:version >= 800
  " Stop vim from silently messing with files that it shouldn't
  set nofixendofline
  " Better ascii friendly listchars
  set listchars=extends:»,nbsp:␣,precedes:«,space:\ ,tab:\ »,trail:·
endif

" Mark trailing spaces as errors
if has("match")
  match ErrorMsg '\s\+$'
endif

" Set default shell
if exists('$SHELL')
  set shell=$SHELL
else
  set shell=/bin/sh
endif

" Commands

" Mistake abbreviations
cnoreabbrev BD :bd
cnoreabbrev Bd :bd
cnoreabbrev E  :e
cnoreabbrev Q  :q
cnoreabbrev QA :qa
cnoreabbrev Qa :qa
cnoreabbrev SO :so
cnoreabbrev So :so
cnoreabbrev W  :w
cnoreabbrev WQ :wq
cnoreabbrev Wq :wq
cnoreabbrev XA :xa
cnoreabbrev Xa :xa
cnoreabbrev bD :bd
cnoreabbrev qA :qa
cnoreabbrev sO :so
cnoreabbrev wQ :wq
cnoreabbrev xA :xa

" Remove trailing whitespace
command! FixWhitespace :%s/\s\+$//e | :%s/\($\n\s*\)\+\%$//e

" Mappings

" Fix ctrl-arrow keys in screen/tmux
" Enable modified arrow keys, see  :help xterm-modifier-keys
if &term =~ '^\%(screen\|tmux\)'
  execute "silent! set <xUp>=\<Esc>[@;*A"
  execute "silent! set <xDown>=\<Esc>[@;*B"
  execute "silent! set <xRight>=\<Esc>[@;*C"
  execute "silent! set <xLeft>=\<Esc>[@;*D"
endif

" Enable whichkey bindings
if exists("g:loaded_vim_which_key")

  " This plugin requires timeout and a recommend length not too big/small
  " You should set this in your init file, If not set we will set it here | default = 1000
  if !&timeout | let &timeout=1 | endif
  if !&timeoutlen <= 0 | let &timeoutlen=500 | endif

  " Check that leader keys are defined
  if empty('g:mapleader') || empty('g:localleader')
    echoerr "WhichKey plugin requires both a <leader> and <localleader>!"
      \ . "\n Please set these in your vimrc/init.vim"
    finish
  endif

  " Map leader to which_key
  nnoremap <silent> <leader> :silent WhichKey '<Space>'<CR>
  nnoremap <silent> <localleader> :<c-u>WhichKey  "&localleader"<CR>
  vnoremap <silent> <leader> :silent <c-u> :silent WhichKeyVisual '<Space>'<CR>
  nnoremap <silent> \ :WhichKey  '\'<CR>

  let g:which_key_disable_default_offset = 1
  let g:which_key_use_floating_win = 0

  let g:which_key_map =  {}

  let g:which_key_map.f = {
    \ 'name': '+fuzzy',
    \ '/': [':History/', 'history'],
    \ ';': [':Commands', 'commands'],
    \ 'B': [':Buffers', 'open buffers'],
    \ 'C': [':BCommits', 'buffer commits'],
    \ 'G': [':GFiles?', 'modified git files'],
    \ 'H': [':History:', 'command history'],
    \ 'M': [':Maps', 'normal maps'],
    \ 'P': [':Tags', 'project tags'],
    \ 'S': [':Colors', 'color schemes'],
    \ 'T': [':BTags', 'buffer tags'],
    \ 'a': [':Ag', 'text Ag'],
    \ 'b': [':BLines', 'current buffer'],
    \ 'c': [':Commits', 'commits'],
    \ 'f': [':Files', 'files'],
    \ 'g': [':GFiles', 'git files'],
    \ 'l': [':Lines', 'lines'],
    \ 'm': [':Marks', 'marks'],
    \ 'p': [':Helptags', 'help tags'],
    \ 'r': [':History', 'recent files'],
    \ 's': [':Snippets', 'snippets'],
    \ 't': [':Rg', 'text Rg'],
    \ 'w': [':Windows', 'search windows'],
    \ 'y': [':Filetypes', 'file types'],
    \ 'z': [':FZF', 'FZF'],
    \ }

  let g:which_key_map.g = {
    \ 'name': '+git',
    \ 'R': [':Git remote', 'show remote'],
    \ 'c': [':Git commit<CR>', 'commit'],
    \ 'd': [':Gdiffsplit', 'diffthis'],
    \ 'g': [':Git', 'show status'],
    \ 'o': [':.GBrowse<CR>', 'open browser'],
    \ 'r': [':GitGutterUndoHunk', 'unstage hunk'],
    \ 's': [':GitGutterStageHunk', 'stage hunk'],
    \ }

  let g:which_key_map.s = {
    \ 'name': '+session',
    \ 'c': [':CloseSession', 'close session'],
    \ 'd': [':DeleteSession', 'delete session'],
    \ 'o': [':OpenSession', 'open session'],
    \ 's': [':SaveSession', 'save session'],
    \ }

  " Register which key map
  call which_key#register('<Space>', 'g:which_key_map')
endif

" Make Y yank till end of line
nnoremap Y y$

" Disable Ex mode
nnoremap <silent>Q <nop>

" Black-hole <Delete> key
" Makes the delete key never yank
nnoremap <Del> "_x
vnoremap <Del> "_x

" Paste last yank, ignore delete
" Paste before/after cursor respectively
nnoremap <localleader>p "0p
nnoremap <localleader>P "0P

" Move visual block
vnoremap <M-k> :m '<-2<CR>gv=gv
vnoremap <M-j> :m '>+1<CR>gv=gv

" Jumplist center cursor
nnoremap <silent> <C-o> <C-o>zz
nnoremap <silent> <C-i> <C-i>zz

" Keep incsearch in center of buffer
nnoremap <silent> n nzzzv
nnoremap <silent> N Nzzzv

" Search for visually highlighted text
vnoremap <silent> * y<ESC>/<c-r>"<CR>N

" Prevent jump when search under cursor
nnoremap <silent> * *N

" Easy buffer switching
nnoremap <silent> [b :bp<CR>
nnoremap <silent> ]b :bn<CR>

nnoremap <silent> <C-PageUp> :bn<CR>
nnoremap <silent> <C-PageDown> :bp<CR>

" Move visual block
vnoremap <Tab> :m '>+1<CR>gv=gv
vnoremap <S-Tab> :m '<-2<CR>gv=gv

" Visual indentation
vnoremap <silent> < <gv
vnoremap <silent> > >gv
vnoremap <silent> <S-Tab> <gv
vnoremap <silent> <Tab> >gv

" Remove highlight after search with ESCAPE
nnoremap <silent> <esc> :nohlsearch<cr><esc>

" Git fugitive
nnoremap <leader>gg :Git<CR>
nnoremap <leader>gc :Git commit<CR>

" Open current line on GitHub
nnoremap <leader>go :.GBrowse<CR>

" Git Gutter
nnoremap <leader>gd :Gdiffsplit<CR>
xnoremap <leader>gs :GitGutterStageHunk<CR>
xnoremap <leader>gr :GitGutterUndoHunk<CR>

nnoremap ]h :GitGutterNextHunk<CR>
nnoremap [h :GitGutterPrevHunk<CR>

" session management
nnoremap <leader>so :OpenSession<Space>
nnoremap <leader>ss :SaveSession<Space>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

nnoremap <leader>e :Explore<CR>

nnoremap <leader>fc :Colors<CR>
nnoremap <leader>ff :FZF<CR>
nnoremap <leader>fr :History<CR>

" Terminal

function TerminalSettings()
  " Skip terminal settings for fzf buffers
  if &filetype == 'fzf'
    return
  endif

  setlocal colorcolumn=0
  setlocal nocursorline
  setlocal nonumber
  setlocal norelativenumber
  setlocal nospell
  setlocal scrolloff=0
  setlocal sidescrolloff=0
  setlocal signcolumn=no
  setlocal winfixheight

  " Replace fill/list chars with &nbsp
  setlocal fillchars=eob: 
  setlocal listchars=trail: 

  " Set QOL keymap for escaping terminal
  tnoremap <buffer> <Esc><Esc> <C-\><C-n>
endfunction

function! ToggleTerminal()
  " Check if terminal buffer exists
  if exists('g:terminal_bufnr') && bufexists(g:terminal_bufnr)
    " Check if terminal is already open in any window
    let l:terminal_exists = 0
    let l:terminal_winid = -1

    " Loop through all windows in the current tabpage
    for l:winid in range(1, winnr('$'))
      if winbufnr(l:winid) == g:terminal_bufnr
        let l:terminal_exists = 1
        let l:terminal_winid = l:winid
        break
      endif
    endfor

    " If terminal exists in any window
    if l:terminal_exists
      " If it's the current buffer, quit
      if bufnr('%') == g:terminal_bufnr
        quit
      else
        " Otherwise, focus the terminal window
        silent! execute l:terminal_winid . "wincmd w"
        silent! normal i
      endif
    else
      " If terminal buffer is not open, open it in a new split
      silent! execute 'botright split | buffer ' . g:terminal_bufnr
      silent! normal i
    endif
  else
    " If no terminal buffer exists, create one
    silent! botright term
    let g:terminal_bufnr = bufnr('%')
    silent! normal i

    " No need for 'split' here as 'term' already creates a split
  endif
endfunction

" Map <C-\> to toggle terminal visibility
nnoremap <silent> <C-\> :call ToggleTerminal()<CR>
tnoremap <silent> <C-\> <C-\><C-n>:call ToggleTerminal()<CR>
tnoremap <silent> <C-w> <C-\><C-n><C-w>

" Global Highlight overrides
function! ColorschemeGlobalOverride()
  if g:colors_name == "evening"
    hi Visual ctermfg=Black guifg=Black
  endif

  if &background == "dark"
    hi Normal ctermbg=NONE guibg=NONE
    hi GitGutterAdd ctermbg=NONE guibg=NONE
    hi GitGutterChange ctermbg=NONE guibg=NONE
    hi GitGutterDelete ctermbg=NONE guibg=NONE
    hi! link GitGutterChangeDelete GitGutterDelete
  endif

  hi CursorLine cterm=NONE guifg=NONE guibg=Grey17
  hi CursorLineNr cterm=bold ctermbg=NONE gui=bold guibg=NONE guifg=Gold
  hi CursorLineSign cterm=NONE ctermbg=NONE guibg=NONE
  hi EndOfBuffer ctermbg=NONE guibg=NONE
  hi EndOfBuffer guibg=NONE guifg=gray32
  hi FoldColumn ctermbg=NONE guibg=NONE
  hi LineNr guibg=NONE guifg=gray32
  hi SignColumn ctermbg=NONE guibg=NONE
  hi VertSplit cterm=NONE ctermbg=NONE guibg=NONE guifg=Grey22
  hi! Pmenu guibg=Grey22
  hi! PmenuSel guifg=Black

  hi link CurSearch IncSearch
endfunction

" Only do this part when compiled with support for autocommands.
if has('autocmd')
  " Enable file type detection.
  filetype plugin indent on
  " Group for general document-related autocommands
  augroup document_au
    autocmd!
    " Trim trailing whitespace
    autocmd BufWritePre * :FixWhitespace
    " Minimal autosave (updates on CursorHold)
    autocmd CursorHold,CursorHoldI * silent! update
    " Update on focus lost and redraw
    autocmd FocusLost * update | redraw
  augroup END

  " Group for colorscheme overrides
  augroup colorscheme_au
    autocmd!
    autocmd VimEnter,ColorScheme * call ColorschemeGlobalOverride()
  augroup END

  " Group for terminal buffer-specific settings
  augroup terminal_au
    autocmd!
    " Auto-enter insert mode for terminal buffers and apply settings
    autocmd BufWinEnter,TerminalOpen * if &buftype == 'terminal' | silent! call TerminalSettings() | endif
    " Enter insert mode when entering a terminal window
    autocmd BufWinEnter,WinEnter * if &buftype == 'terminal' | silent! normal i | endif
  augroup END

  " Ensure help buffers open at the top
  augroup help_au
    autocmd!
    autocmd FileType help nmap <buffer> q :quit<CR>
    autocmd FileType help wincmd K
  augroup END

  " Group for fugitive.vim buffer-specific settings
  augroup fugitive_au
    autocmd!
    autocmd FileType fugitive nmap <buffer> <tab> =
    autocmd FileType fugitive nmap <buffer> q gq
    autocmd FileType fugitive setlocal nonumber norelativenumber
  augroup END
else
  " Automatically indent new lines
  set autoindent
endif

" Check if retrobox colorscheme is available
if filereadable(globpath(&runtimepath, 'colors/retrobox.vim'))
  colorscheme retrobox
else
  " Fall back to the default colorscheme if retrobox is not available
  colorscheme torte
endif
