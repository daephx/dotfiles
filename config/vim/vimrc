" vimrc: A greatly improved version oF the good old UNIX editor Vi
" https://github.com/vim/vim

" vim-tiny lacks 'eval'
if has("eval")
  let skip_defaults_vim = 1
endif

" Plugins

" Only load plugins if vim-plug file detected
if filereadable(expand("~/.vim/autoload/plug.vim"))
  call plug#begin($XDG_DATA_HOME . '/vim/plugins')
  Plug 'Yggdroot/indentLine'
  Plug 'airblade/vim-gitgutter'
  Plug 'editorconfig/editorconfig-vim'
  Plug 'liuchengxu/vim-which-key'
  Plug 'machakann/vim-highlightedyank'
  Plug 'sheerun/vim-polyglot'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-rhubarb'
  Plug 'tpope/vim-vinegar'
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'

  " Fzf - fuzzy search
  if isdirectory('/usr/local/opt/fzf')
    Plug '/usr/local/opt/fzf'
    Plug 'junegunn/fzf.vim'
  else
    Plug 'junegunn/fzf', { 'dir': $XDG_LOCAL_HOME . '/src/fzf', 'do': './install --bin' }
    Plug 'junegunn/fzf.vim'
  endif

  call plug#end()
endif

" Install vim-plug
function! InstallVimplug()
  " Dependency Validation
  let vimplug_exists=expand('~/.vim/autoload/plug.vim')
  if has('win32') && !has('win64')
    let curl_exists=expand('C:\Windows\Sysnative\curl.exe')
  else
    let curl_exists=expand('curl')
  endif
  " Bootstrap vim-plug
  if !filereadable(vimplug_exists)
    if !executable(curl_exists)
      echoerr 'You have to install curl or first install vim-plug yourself!'
      return
    endif
    echo "Installing Vim-Plug..."
    echo ""
    let plug_url='https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    silent exec '!' . curl_exists . ' -fLo '
          \ . shellescape(vimplug_exists)
          \ . " --create-dirs " . plug_url
    let g:not_finish_vimplug = "yes"
    autocmd VimEnter * PlugInstall
    source expand('<sfile>')
  endif
endfunction

" vim-airline
if &runtimepath =~? "vim-airline"
  " disable insert text if plugins available
  set noshowmode
endif

" let g:airline_theme = g:colors_name
let g:airline_theme = 'dark'
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#virtualenv#enabled = 1
let g:airline_skip_empty_sections = 1
let g:airline_powerline_fonts = 1

let g:airline_detect_spell=0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#show_buffers = 1
let g:airline#extensions#tabline#show_close_button = 0
let g:airline#extensions#tabline#show_splits = 1
let g:airline#extensions#tabline#show_tab_count = 1
let g:airline#extensions#tabline#show_tab_nr = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#tab_min_count = 1

" fzf.vim
let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"

" ripgrep
if executable('rg')
  let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!.git/*"'
  set grepprg=rg\ --vimgrep
  command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)
endif

" Indent blank line
let g:indentLine_enabled = 1
let g:indentLine_char = '│'
let g:indentLine_first_char = '│'
let g:indentLine_showFirstIndentLevel = 1

" set highlight to 1000 ms
let g:highlightedyank_highlight_duration = 1000

" Session-saver
let g:session_autosave = 'no'

let g:gitgutter_sign_allow_clobber = 0
let g:gitgutter_set_sign_backgrounds = 1
let g:gitgutter_override_sign_column_highlight = 1

let g:gitgutter_sign_added = '▎'
let g:gitgutter_sign_modified = '▎'
let g:gitgutter_sign_removed = '▎'
let g:gitgutter_sign_removed_first_line = '▎'
let g:gitgutter_sign_removed_above_and_below = '▎'
let g:gitgutter_sign_modified_removed = '▎'

" keys to call the function Leader key preference
" nnoremap <space> <nop>
let g:mapleader = "\<space>"
let g:localleader = "\\"

" Settings
set nocompatible " Don't try to be vi compatible
set secure " Disable sourcing of directory vimrc/exrc

set autoread " Auto reload open buffer
set autowrite " Write files on change
set hidden " Hide buffers instead of unloading them
set lazyredraw " Execute macros faster
set noautochdir " Disable auto cd to open file
set splitbelow " Open new splits below
set splitright " Open new splits to the right

set expandtab " Replace tabs with spaces
set number " Show absolute line numbers
set cmdheight=1 " Make command-line only one row high
set colorcolumn=+1 " Textwidth column ruler
set foldcolumn=0 " Column shown in the window indicating open/closed folds
set conceallevel=0 " Prevent conceal
set history=100 " Command history
set icon " Enable icon support
set list " Enable list chars
set nowrap " Disable line wrapping
set relativenumber " Show relative line numbers
set ruler " Show position on in bottom right
set scrolloff=8 " Keep cursor centered on screen
set showmode " Show command and insert mode
set signcolumn=yes " Display padding/signs next to line numbers
set timeout " Set time limit on key sequence
set timeoutlen=250 " Timeout for mapped sequence
set ttimeoutlen=0 " Timeout for key code sequence
set updatetime=1000 " Timeout idle before CursorHold or updating swapfile

set textwidth=80 " Limit length of characters per line
set shiftwidth=4 " Number of spaces for expandtab indent
set softtabstop=4 " Number of spaces for tabs during edit operations
set tabstop=4 " Number of spaces to represent tab characters
set encoding=utf-8 " Default file encoding

set backspace=indent,eol,start " More powerful backspacing
set diffopt+=vertical " Start diff mode with vertical splits
set spellsuggest=fast,10
set linebreak

" Popup Menu
set pumheight=20 " Control popup menu length
set pumwidth=15 " Control popup menu thickness

set shortmess+=I " No intro message
set shortmess+=c " No more pattern not found
set shortmess+=f " Shorter quickfix/search count

" set editor background style
set background=dark

" activate line numbers
set number
set relativenumber
set signcolumn="yes"
set lazyredraw

" turn col and row position on in bottom right
set ruler

" show command and insert mode
set showmode

" Should show statusline and tabline
set laststatus=2
set showtabline=2
set signcolumn=yes

" More risky, but cleaner
set nobackup
set noswapfile
set nowritebackup

" Enable list chars
set list

" Icon support
set icon

" Center the cursor always on the screen
set scrolloff=8

" Cursorline settings
set cursorline
set cursorlineopt=number

" Highlight search
set hlsearch " Highlight search
set ignorecase " Case insensitive search
set incsearch " Enable incremental search
set smartcase " Case sensitive only if search contains uppers

" Folding
set foldmethod=indent " Fold by method (indent & syntax are both good)
set foldlevelstart=9  " We want all fold to be expand at start
set foldnestmax=9 " Max fold nest levels

" Virtual fill characters for UI elements
set fillchars+=fold:\ ,vert:│

" Avoid most of the 'Hit Enter ...' messages
set shortmess+=aoOtTI

" Enhanced command-line completion
" Insert mode completion
set completeopt=menuone,noinsert,noselect

set wildmenu " Enable wild menu by default
set wildignorecase
set wildmode=full:lastused

" Ignore files
set wildignore+=*.db
set wildignore+=*.o
set wildignore+=*.obj
set wildignore+=*.pyc " Python cache
set wildignore+=*.rbc
set wildignore+=*.so
set wildignore+=*.sqlite
set wildignore+=*.swp
set wildignore+=*.zip
set wildignore+=*/tmp/*
set wildignore+=*_build/*
set wildignore+=*node_modules/ " Node module environment
set wildignore+=.git/ " Git Version control
set wildignore+=__pycache__
set wildignore+=android/
set wildignore+=build/ " Common build directory
set wildignore+=coverage/
set wildignore+=ios/

" Prevents truncated yanks, deletes, etc.
set viminfo+=n~/.cache/vim/.viminfo
set viminfo='20,<1000,s1000

" Format Options
" Just the defaults, these are changed per filetype by plugins.
" Most of the utility of all of this has been superseded by the use of
" modern simplified pandoc for capturing knowledge source instead of
" arbitrary raw text files.

set fo+=1 " Don't break a line after a one-letter word
set fo+=M " Don't add space before or after multi-byte char
set fo+=j " Delete comment prefix when joining
set fo+=l " Long lines not broken in insert mode
set fo+=m " Multi-byte character line break support
set fo+=q " Allow formatting of comments with gq
set fo-=2 " Don't use the indent of second paragraph line
set fo-=B " Don't add space between two multi-byte chars
set fo-=a " Disable auto-formatting of paragraph changes
set fo-=b " Don't use broken 'vi-compatible auto-wrapping'
set fo-=c " Autowrap comments using textwidth with leader
set fo-=n " Don't recognized numbered lists
set fo-=o " Don't auto-insert comment leader on o/O in normal
set fo-=r " Don't auto-insert comment leader on enter in insert
set fo-=t " Don't auto-wrap text using text width
set fo-=v " Don't use broken 'vi-compatible auto-wrapping'
set fo-=w " Don't use trailing whitespace for paragraphs

" Use a line cursor within insert mode and a block cursor everywhere else.
"

" Cursor configs

fun! UpdateTermCursor()

    " Cursor in terminal:
    " Link: https://vim.fandom.com/wiki/Configuring_the_cursor
    " 0 -> blinking block not working in wsl
    " 1 -> blinking block
    " 2 -> solid block
    " 3 -> blinking underscore
    " 4 -> solid underscore
    " Recent versions of xterm (282 or above) also support
    " 5 -> blinking vertical bar
    " 6 -> solid vertical bar

  if &term =~ "xterm\\|rxvt"
    fun! s:cologet(gr)
      let cc = execute('hi ' . a:gr)
      let color = matchstr(cc, 'guifg=\zs[^ ]*')
      if color == 'bg'
        let color = matchstr(cc, 'guibg=\zs[^ ]*')
      endif
      if color == ''
        let color = matchstr(cc, 'ctermfg=\zs[^ ]*')
      endif
      if color[0] == '#'
        let color = 'rgb:' . substitute(color[1:-1], '..', '\0\/', 'g')[0:-2]
      endif
      return color
    endfun
    let cur = s:cologet('Cursor')
    " You can change group, for example CursorLineNr, Special, NonText etc.
    let curb = s:cologet('Type')
    let &t_SI="\<Esc>[5 q\<Esc>]12;" . curb . "\x7"
    let &t_EI="\<Esc>[1 q\<Esc>]12;" . cur . "\x7"
    " Redraw
    :call feedkeys("i\<C-O>:stopinsert\<CR>")
    " silent! exe ':redraw!'
    " :call feedkeys("i\<Esc>l")
    " Restore cursor to I when leaving vim
    augroup TermCursorLeave
      autocmd!
      autocmd VimLeave * silent !echo -ne "\e[5 q"
    augroup END
    augroup windows_term
      autocmd!
      autocmd VimEnter * silent !echo -ne "\e[1 q"
      autocmd VimLeave * silent !echo -ne "\e[5 q"
    augroup END
  endif
endfun


if &term =~ '^xterm'
  " enter vim
  autocmd VimEnter * silent !echo -ne "\e[3 q"
  " oherwise
  let &t_EI .= "\<Esc>[3 q"
  " insert mode
  let &t_SI .= "\<Esc>[5 q"
  " 1 or 0 -> blinking block
  " 2 -> solid block
  " 3 -> blinking underscore
  " 4 -> solid underscore
  " Recent versions of xterm (282 or above) also support
  " 5 -> blinking vertical bar
  " 6 -> solid vertical bar
  " leave vim

  let &t_SI.="\e[5 q"
  let &t_SR.="\e[4 q"
  let &t_EI.="\e[1 q"

  autocmd VimLeave * silent !echo -ne "\e[5 q"
endif

if &term == 'win32'
  let &t_ti.=" \e[1 q"
  let &t_SI.=" \e[5 q-- INSERT --"
  let &t_EI.=" \e[1 q"
  let &t_te.=" \e[0 q"
else
  let &t_ti.="\e[1 q"
  let &t_SI.="\e[5 q"
  let &t_EI.="\e[1 q"
  let &t_te.="\e[0 q"
endif

" Restore cursor when leaving vim -- Windows Powershell
autocmd VimLeave * silent !echo -ne "\e[5 q"

" Reference chart of values:
" Ps = 0  -> blinking block.
" Ps = 1  -> blinking block (default).
" Ps = 2  -> steady block.
" Ps = 3  -> blinking underline.
" Ps = 4  -> steady underline.
" Ps = 5  -> blinking bar (xterm).
" Ps = 6  -> steady bar (xterm).

" Change cursor in normal/insert mode
" let &t_EI="\e[2 q" "EI = NORMAL mode (ELSE)
" let &t_SI="\e[6 q" "SI = INSERT mode
" let &t_SR="\e[4 q" "SR = REPLACE mode

" set guicursor=n-v-c:block-nCursor/lCursor,ve:ver35-Cursor,o:hor50-Cursor,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor,sm:block-Cursor-blinkwait175-blinkoff150-blinkon175

" Fix ctrl-arrow keys in screen/tmux
" Enable modified arrow keys, see  :help xterm-modifier-keys
if &term =~ '^\%(screen\|tmux\)'
  execute "silent! set <xUp>=\<Esc>[@;*A"
  execute "silent! set <xDown>=\<Esc>[@;*B"
  execute "silent! set <xRight>=\<Esc>[@;*C"
  execute "silent! set <xLeft>=\<Esc>[@;*D"
endif

" Enable syntax highlighting
if has("syntax") && !g:syntax_on
  set spell " Apply spell highlight to comments/strings
  set syntax=on
  syntax spell toplevel
endif

" Vim8 Conditionals
if v:version >= 800
  " Stop vim from silently messing with files that it shouldn't
  set nofixendofline

  " Better ascii friendly listchars
  set listchars=extends:»,nbsp:␣,precedes:«,space:\ ,tab:\ »,trail:·
endif

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Enable file type detection.
  filetype plugin indent on
else
  " Automatically indent new lines
  set autoindent
endif

" Mark trailing spaces as errors
if has("match")
  match ErrorMsg '\s\+$'
endif

" Set default shell
if exists('$SHELL')
    set shell=$SHELL
else
    set shell=/bin/sh
endif

" Copy/Paste/Cut
if has('unnamedplus')
  set clipboard=unnamed,unnamedplus
endif

" Visual

" Disable visual bell
set belloff=all noerrorbells novisualbell t_vb=

" Here because plugins and stuff need it
if has("syntax")
  syntax enable
  " Apply spell highlight to comments/strings
  set nospell
  syntax spell toplevel
endif

if has('termguicolors')
  set t_Co=256       " Enable 256 colors
  set termguicolors  " Enable GUI colors for the terminal to get truecolor
endif

" Commands

" Mistake abbreviations
cnoreabbrev BD :bd
cnoreabbrev Bd :bd
cnoreabbrev Q  :q
cnoreabbrev QA :qa
cnoreabbrev Qa :qa
cnoreabbrev W  :w
cnoreabbrev WQ :wq
cnoreabbrev Wq :wq
cnoreabbrev XA :xa
cnoreabbrev Xa :xa
cnoreabbrev bD :bd
cnoreabbrev qA :qa
cnoreabbrev wQ :wq
cnoreabbrev xA :xa

" Remove trailing whitespace
command! FixWhitespace :%s/\s\+$//e | :%s/\($\n\s*\)\+\%$//e

" --- Mappings ---

" Enable whichkey bindings
if !empty("g:loaded_vim_which_key")

  " This plugin requires timeout and a recommend length not too big/small
  " You should set this in your init file, If not set we will set it here | default = 1000
  if !&timeout | let &timeout=1 | endif
  if !&timeoutlen <= 0 | let &timeoutlen=500 | endif

  " Check that leader keys are defined
  if empty('g:mapleader') || empty('g:localleader')
    echoerr "WhichKey plugin requires both a <leader> and <localleader>!"
      \ . "\n Please set these in your vimrc/init.vim"
    finish
  endif

  " Map leader to which_key
  nnoremap <silent> <leader> :silent WhichKey '<Space>'<CR>
  nnoremap <silent> <localleader> :<c-u>WhichKey  "&localleader"<CR>
  vnoremap <silent> <leader> :silent <c-u> :silent WhichKeyVisual '<Space>'<CR>
  nnoremap <silent> \ :WhichKey  '\'<CR>

  let g:which_key_disable_default_offset = 1
  let g:which_key_use_floating_win = 0

  let g:which_key_map =  {}
  " let g:which_key_map['h'] = [ '<C-W>s', 'split below']
  " let g:which_key_map['v'] = [ '<C-W>v', 'split right']

  let g:which_key_map.f = {
    \ 'name' : '+fuzzy',
    \ '/' : [':History/' , 'history'],
    \ ';' : [':Commands' , 'commands'],
    \ 'B' : [':Buffers'  , 'open buffers'],
    \ 'C' : [':BCommits' , 'buffer commits'],
    \ 'G' : [':GFiles?'  , 'modified git files'],
    \ 'H' : [':History:' , 'command history'],
    \ 'M' : [':Maps'     , 'normal maps'] ,
    \ 'P' : [':Tags'     , 'project tags'],
    \ 'S' : [':Colors'   , 'color schemes'],
    \ 'T' : [':BTags'    , 'buffer tags'],
    \ 'a' : [':Ag'       , 'text Ag'],
    \ 'b' : [':BLines'   , 'current buffer'],
    \ 'c' : [':Commits'  , 'commits'],
    \ 'f' : [':Files'    , 'files'],
    \ 'g' : [':GFiles'   , 'git files'],
    \ 'l' : [':Lines'    , 'lines'] ,
    \ 'm' : [':Marks'    , 'marks'] ,
    \ 'p' : [':Helptags' , 'help tags'] ,
    \ 'r' : [':History'  , 'recent files'],
    \ 's' : [':Snippets' , 'snippets'],
    \ 't' : [':Rg'       , 'text Rg'],
    \ 'w' : [':Windows'  , 'search windows'],
    \ 'y' : [':Filetypes', 'file types'],
    \ 'z' : [':FZF'      , 'FZF'],
    \ }

  let g:which_key_map.g = {
    \ 'name' : '+git',
    \ 'R' : [':Git remote'        , 'show remote'],
    \ 'c' : [':Git commit<CR>'    , 'commit'],
    \ 'd' : [':Gdiffsplit'        , 'diffthis'],
    \ 'g' : [':Git'               , 'show status'],
    \ 'o' : [':.GBrowse<CR>'      , 'open browser'],
    \ 'r' : [':GitGutterUndoHunk' , 'unstage hunk'],
    \ 's' : [':GitGutterStageHunk', 'stage hunk'],
    \ }

  let g:which_key_map.s = {
    \ 'name' : '+session',
    \ 'c' : [':CloseSession'  , 'close session'],
    \ 'd' : [':DeleteSession' , 'delete session'],
    \ 'o' : [':OpenSession'   , 'open session'],
    \ 's' : [':SaveSession'   , 'save session'],
    \ }

  " Register which key map
  call which_key#register('<Space>', 'g:which_key_map')
endif

" Make Y yank till end of line
nnoremap Y y$

" Disable Ex mode
nnoremap <silent>Q <nop>

" Black-hole <Delete> key
" Makes the delete key never yank
nnoremap <Del> "_x
vnoremap <Del> "_x

" Paste last yank, ignore delete
" Paste before/after cursor respectively
nnoremap <localleader>p "0p
nnoremap <localleader>P "0P

" Move visual block
vnoremap <M-k> :m '<-2<CR>gv=gv
vnoremap <M-j> :m '>+1<CR>gv=gv

" Jumplist center cursor
nnoremap <silent> <C-o> <C-o>zz
nnoremap <silent> <C-i> <C-i>zz

" Keep incsearch in center of buffer
nnoremap <silent> n nzzzv
nnoremap <silent> N Nzzzv

" Search for visually highlighted text
vnoremap <silent> * y<ESC>/<c-r>"<CR>N

" Prevent jump when search under cursor
nnoremap <silent> * *N

" Easy buffer switching
nnoremap <silent> [b :bp<CR>
nnoremap <silent> ]b :bn<CR>

nnoremap <silent> <C-PageUp> :bn<CR>
nnoremap <silent> <C-PageDown> :bp<CR>

" Move visual block
vnoremap <Tab> :m '>+1<CR>gv=gv
vnoremap <S-Tab> :m '<-2<CR>gv=gv

" Remove highlight after search with ESCAPE
nnoremap <silent> <esc> :nohlsearch<cr><esc>

" Git fugitive
nnoremap <leader>gg :Git<CR>
nnoremap <leader>gc :Git commit<CR>

" Open current line on GitHub
nnoremap <leader>go :.GBrowse<CR>

" Git Gutter
nnoremap  <leader>gd :Gdiffsplit<CR>
xnoremap <leader>gs :GitGutterStageHunk<CR>
xnoremap <leader>gr :GitGutterUndoHunk<CR>

" session management
nnoremap <leader>so :OpenSession<Space>
nnoremap <leader>ss :SaveSession<Space>
nnoremap <leader>sd :DeleteSession<CR>
nnoremap <leader>sc :CloseSession<CR>

nnoremap <leader>e :Explore<CR>

nnoremap <leader>fc :Colors<CR>
nnoremap <leader>ff :FZF<CR>
nnoremap <leader>fr :History<CR>

" Terminal

function TerminalSettings()
  setlocal colorcolumn=0
  setlocal nonumber
  setlocal norelativenumber
  setlocal nospell
  setlocal scrolloff=0
  setlocal sidescrolloff=0
  setlocal winfixheight
endfunction

nnoremap <silent> <C-\> :execute 'terminal' \| wincmd J \| resize 20<CR>
" tnoremap <silent> <C-\> <C-\><C-n>:call MonkeyTerminalToggle()<CR>
tnoremap <silent> term:\\* <esc><esc> <C-\><C-n>
tnoremap <silent> <C-w> <C-\><C-n><C-w>

" Global Highlight overrides
function! ColorschemeGlobalOverride()

  if &background != "light"
    highlight Normal    ctermbg=NONE guibg=NONE
  endif

  highlight ColorColumn    cterm=NONE ctermbg=NONE guibg=gray8
  highlight CursorLineNr   cterm=NONE ctermbg=NONE guibg=NONE
  highlight CursorLineSign cterm=NONE ctermbg=NONE guibg=NONE
  highlight VertSplit      cterm=NONE ctermbg=NONE guibg=NONE guifg=gray22

  highlight Comment       ctermbg=NONE guibg=NONE guifg=gray46
  highlight EndOfBuffer   ctermbg=NONE guibg=NONE
  highlight FoldColumn    ctermbg=NONE guibg=NONE
  highlight SignColumn    ctermbg=NONE guibg=NONE

  highlight EndOfBuffer   guibg=NONE   guifg=gray32
  highlight LineNr        guibg=NONE   guifg=gray32

  highlight Visual        ctermbg=238  ctermfg=NONE guibg=NONE guibg=Grey27

  highlight! link PMenu Normal

  highlight! GitGutterAdd           ctermfg=2 guibg=NONE guifg=Green
  highlight! GitGutterChange        ctermfg=3 guibg=NONE guifg=Yellow
  highlight! GitGutterDelete        ctermfg=1 guibg=NONE guifg=Red
  highlight! GitGutterChangeDelete  ctermfg=4 guibg=NONE guifg=Blue
endfunction

" Autocmds
if has('autocmd')
  augroup document_au
    autocmd!
    " Trim trailing whitespace
    autocmd BufWritePre * :%s/\s\+$//e
    autocmd BufWritePre * :%s/\($\n\s*\)\+\%$//e
    " Minimal implementations of autosave
    autocmd CursorHold,CursorHoldI * silent! update
    autocmd FocusLost * :update | redraw<CR>
  augroup END
  augroup colorscheme_au
    autocmd!
    autocmd VimEnter,ColorScheme * :call ColorschemeGlobalOverride()
  augroup END
  augroup terminal_au
    autocmd!
    " Disable terminal buffer settings
    autocmd FileType term://* :call TerminalSettings()<CR>
  augroup END
endif
