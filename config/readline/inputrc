# .inputrc: user configuration file for GNU readline

# Carries over site-wide readline configuration
$include /etc/inputrc

# Uncomment to enable vi-like command line editing mode.
set editing-mode vi

# Filetype colors in completion lists
set colored-stats on

# Make sure we don't output everything on the 1 line
set horizontal-scroll-mode Off

# Suppress bell noise
set bell-style none

# Make Tab autocomplete regardless of filename case
set completion-ignore-case on

# Treat hyphens and underscores as equivalent
set completion-map-case on

# With multiple matches, only show the remaining part.
# Unsupported in editline  >:-(
set completion-prefix-display-length 2

# Try to avoid accidental multi-line pastes being interpreted as commands
set enable-bracketed-paste on

# Completion when in middle of word doesn't duplicate existing input.
# Like many useful GNU things, seems unsupported in editline.
set skip-completed-text On

# Automatically complete directory symlinks with ending /
# Also offers them for `complete -d` like cd & pushd
set mark-symlinked-directories on

# List all matches in case multiple possible completions are possible
set show-all-if-ambiguous on

# Immediately add a trailing slash when auto completing symlinks to directories
set mark-symlinked-directories on

# Do not autocomplete hidden files unless the pattern explicitly begins with a dot
set match-hidden-files off

# Show all autocomplete results at once
set page-completions off

# If there are more than 200 possible completions for a word, ask to show them all
set completion-query-items 200

# Show extra file information when completing, like `ls -F` does
set visible-stats on

# Be more intelligent when auto-completing by also looking at the text after
# the cursor. For example, when the current line is "cd ~/src/mozil", and
# the cursor is on the "z", pressing Tab will not autocomplete it to "cd
# ~/src/mozillail", but to "cd ~/src/mozilla".
# (This is supported by the Readline used by Bash 4.)
set skip-completed-text on

# Allow UTF-8 input and output, instead of showing stuff like $'\0123\0456'
set input-meta on
set output-meta on
set convert-meta off

# Ctrl-n/p history navigation
"\C-n":history-search-forward
"\C-p":history-search-backward

# Use text that has already been typed as the prefix for searching through
# commands (i.e. more intelligent Up/Down behavior)
"\e[B": history-search-forward
"\e[A": history-search-backward

"\e[C": forward-char
"\e[D": backward-char

"\e[1;5C": forward-word   # ctrl + right
"\e[1;5D": backward-word  # ctrl + left

"\C-_": unix-word-rubout
"\e[_": backward-word

$if mode=emacs
  # Readline specific functions
  "\e[1~": beginning-of-line           # CTRL + A
  "\e[4~": end-of-line                 # CTRL + E
  "\e[5C": forward-word                # Control + Right
  "\e[5D": backward-word               # Control + Left
  "\e[3~": delete-char                 # Delete
  "\e[2~": quoted-insert               # CTRL + v
  "\e[5~": history-search-backward     # Page Up
  "\e[6~": history-search-forward      # Page Down
  #"\t": menu-complete                 # Tab cycles through completions

  # If the above prevents Left and Right from working, try this:
  #"\e[C": forward-char                # Move forward one character.
  #"\e[D": backward-char               # Move backwards one character.
$endif

# Avoid binding ^J, ^M,  ^C, ^?, ^S, ^Q, etc.
$if mode=vi
  set keymap vi-command
  "gg": beginning-of-history
  "G": end-of-history
  "k": history-search-backward
  "j": history-search-forward
  "?": reverse-search-history
  "/": forward-search-history

  set keymap vi-insert
  "\C-l": clear-screen
  "\C-w": backward-kill-word
  "\C-a": beginning-of-line
  "\C-e": end-of-line
$endif

$if Bash
  Space: magic-space
$endif

$if Python
$endif

# IPython needs this to appear at the bottom of the
# file for clear-screen to work
set keymap vi
